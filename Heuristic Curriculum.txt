Heuristic 1: Visibility of system status
The visual presentation of a system is the first impression a user will have. A first impression is a lasting impression, therefore, the visuals must be a primary focus. The main way that users interact with technology is with visuals, typically through a graphical user interface (GUI), so it is vital that thought is put into the visual design of the system, not just towards making the system look visually appealing.


“Visibility of system status” refers to information that is presented to the user, describing the system’s current state. The user communicates with the system by interacting with it, therefore the system must communicate back in order to help the user decide their next move. If not, the user would be clueless, guessing at the current state of the system.


The most important element of the system status that needs to be communicated to the user is providing appropriate feedback to their actions. For example, if a user clicks on an icon,  something should visually indicate that the action was performed. If not, the user will likely keep clicking the icon, leading to potentially unwanted behavior. Even if the result of an action is still being performed, or can not be communicated to the user, the action performed must be acknowledged as soon as possible. Immediate feedback can prevent the user from being confused as to if their action had any effect. An example of immediate feedback would be, if a system needs more time to process an action, a loading bar or other indication can be displayed so the user gets confirmation that the action is working as intended.


Another important aspect of information sharing is trust. Sharing the system status will build user trust, while hiding the system status will break user trust. If the system changes state in a way that affects the user without informing them, the user will be left confused and less likely to use the system in the future. The user should be who is in control of the system, systems should avoid changing states, systems should only change states when absolutely necessary. The user should have the most control over the system’s states.


There are many elements of a system’s state that are of interest to the user, but there are many more where the user has no interest. Generally, elements that may affect a user’s decision-making are highly important to include, and all others should be excluded. This often includes general system information like battery life or internet connectivity, but will leave out the more specific information like the machine’s IP address. Determining what status items are important involves extensive testing and feedback.


Heuristic 8: Aesthetic and minimalist design
Since these indicators will be visible at almost all times, it is important that they follow an aesthetic and minimalist design. This means that the visual design of the UI is focused on the information most relevant to the user. Unnecessary indicators will only serve to clutter the screen and draw attention away from what the user is looking for.


Choosing an aesthetic can help create a uniform look throughout a system. A uniform look can help a user not be overwhelmed and not get lost within the system. Minimalistic design can also help structure an aesthetic, which can help with familiarity of a system as well as creating an accessible and easy to navigate system.
Lesson 2: Making the System Intuitive
The goal of these heuristics is to streamline user interactions by minimizing confusion and cognitive effort while navigating the platform by using icons or other aspects that are familiar to the user.


Heuristic 2: Match between system and the real world
“Matching between the system and the real world” entails creating interfaces that speak the user’s language and follow real-world conventions.  In order to best streamline user interaction, the system should align with what the users’ pre-existing knowledge about what the system ought to look like.  This includes using words or phrases common to the users and displaying information in a natural and logical order.


Heuristic 6: Recognition rather than recall
“Recognition rather than recall” refers to the need for systems to display information and actions explicitly so that users do not need to remember details from previous interactions.  An example of this would be using a menu of icons in a text editor instead of memorizing command-line functions to edit the text.  This helps to facilitate smoother interactions between the user and system by prompting them with visible and easily recognizable cues instead of making users rely on their memory.
Lesson 3: Ease of Use
The “user control and freedom” and “flexibility and efficiency of use” heuristics both focus on allowing the users to navigate and use the system easily.  This in turn gives them the ability to complete their tasks as efficiently as possible.


Heuristic 3: User control and freedom
“User control and freedom” puts an emphasis on giving the user options.  This includes the ability to navigate the system freely, undo or back buttons, and the ability to easily exit unwanted states.  This allows the user to correct mistakes and backtrack with minimal frustration.


Heuristic 7: Flexibility and efficiency of use
On the other hand, “flexibility and efficiency of use” encourages designing interfaces that cater to both new and expert users.  Ways to increase a system’s “flexibility and efficiency of use” include the ability for users to create custom keyboard shortcuts, customizable settings, and functionalities that expedite more laborious tasks on the system.  This allows both frequent users and newcomers to optimize their work environment in a way that best suits them.
Lesson 4: Standardization and Documentation
Both the “consistency and standards” and “help and documentation” heuristics promote usability by encouraging an environment that is both coherent and has support to assist users.  When implemented, both heuristics help to increase system usability and user productivity.


Heuristic 4: Consistency and standards
The “consistency and standards” heuristic advocates for the system to follow established conventions throughout the interface.  Creating conventions that adhere to user expectations can reduce confusion and cognitive load, create a sense of familiarity, and allow users to understand a new aspect of the system easier by drawing on their knowledge of previous interactions within the system.


Heuristic 10: Help and documentation
“Help and documentation” refers to the importance of providing assistance to the user when they need it.  This could include FAQs, tutorials, or more in-depth guides.  If done correctly, “help and documentation” aids users in learning about the system as well as resolving any issues they might have.
Lesson 5: Error Handling
The aim of the “error prevention”, and “help users recognize, diagnose, and recover from errors” usability heuristics is to minimize the risk of errors and to help users when errors do arise.


Heuristic 5: Error prevention
“Error prevention” emphasizes designing interfaces such that user errors are anticipated and avoided.  This can be accomplished by using clear and descriptive labels for fields, asking for confirmation before performing irreversible actions, and constraints that prevent the user from entering invalid data.  By mitigating errors, users can expect an increase in productivity as well as their experience.


Heuristic 9: Help users recognize, diagnose, and recover from errors
In contrast, the “help users recognize, diagnose, and recover from errors” usability heuristic acknowledges that even after implementing error mitigation techniques, errors will still occur.  In order to best help users navigate through errors, when an error occurs a meaningful message should appear that helps the user to understand what went wrong and what steps they can take to rectify it.  This will help the user to not make the same error again in the future as well as to get them back to their task as soon as possible.